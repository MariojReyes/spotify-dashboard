---
title: "Today's Top Hits"
format:
  dashboard:
    logo: "images/spotify-logo-png-7069.png"
    orientation: columns
---

## Column {width = "50%"}

Billboard Hot 100

```{r, loadpackages}
#| echo: false
#| include: false

library(tidyverse)
library(httr2)

```

```{r, generateaccesstoken}
# Defining access tokens
#| echo: false
#| include: false

client_id <- Sys.getenv("SPOTIFY_CLIENT_ID")
client_secret <- Sys.getenv("SPOTIFY_CLIENT_SECRET")
 
# Generate Spotify access token

req_access_token <- request("https://accounts.spotify.com/api/token") |>
  req_method("POST") |>
  req_headers("Content-Type" = "application/x-www-form-urlencoded") |>
  req_body_raw(paste0(
    "grant_type=client_credentials&client_id=",
    client_id,
    "&client_secret=",
    client_secret
  )) |>
  req_perform() |>
  resp_body_json()

spotify_access_token <- req_access_token$access_token

```

```{r connectionerrorhandling}
#| include: false
#| echo: false


print("=== Credential Check ===")
print(paste("Client ID length:", nchar(client_id)))
print(paste("Client Secret length:", nchar(client_secret)))
print(paste("Client ID starts with:", substr(client_id, 1, 5)))
print(paste("Client Secret starts with:", substr(client_secret, 1, 5)))

# Check if either is empty

if (nchar(client_id) == 0) {
  stop("SPOTIFY_CLIENT_ID environment variable is not set or empty")
}
if (nchar(client_secret) == 0) {
  stop("SPOTIFY_CLIENT_SECRET environment variable is not set or empty")
}

```

```{r, gethot100}

#curl_translate("curl --request GET --url https://api.spotify.com/v1/playlists/6UeSakyzhiEt4NB3UAd6NQ --header 'Authorization: Bearer 1POdFZRZbvb...qqillRxMr2z'")

bbh100 <-request("https://api.spotify.com/v1/playlists/6UeSakyzhiEt4NB3UAd6NQ") |>
  req_method("GET") |>
  req_headers(Authorization = paste("Bearer", spotify_access_token)) |> 
  req_error(is_error = ~ FALSE) |>
  req_perform() |> 
  resp_body_json()
```

```{r}

hot_100_df <- data.frame(
  song_name = unlist(lapply(bbh100$track$items, FUN = function(x) { x$track$name })),
  song_id = unlist(lapply(bbh100$track$items, FUN = function(x) { x$track$id })),
  artist_name = unlist(lapply(bbh100$track$items, FUN = function(item) {item$track$artist[[1]]$name})),
  release_date = unlist(lapply(bbh100$tracks$items, FUN = function(x) { x$track$album$release_date })),
  album_art = unlist(lapply(bbh100$tracks$items, FUN = function(item) {item$track$album$images[[1]]$url})),
  popularity = unlist(lapply(bbh100$tracks$items, FUN = function(item) {item$track$popularity}))
)

hot_100_df
```

## Column {width = "50%"}

Track Audio Analysis 

```{r,trackaudioanalysisreq}
#curl_translate("curl --request GET \ --url https://api.spotify.com/v1/audio-analysis/11dFghVXANMlKmJXsNCbNl \ --header 'Authorization: Bearer 1POdFZRZbvb...qqillRxMr2z'")

gettracksmeta <- vector(mode = "list", length = 100)
for (i in 1:100){
  audio_analysis <- request(paste0("https://api.spotify.com/v1/audio-analysis/", hot_100_df$song_id[i])) |>
  req_method("GET") |>
  req_headers(
    Authorization = paste("Bearer", spotify_access_token),
  ) |>
  req_error(is_error = ~ FALSE) |> 
  req_perform() |> 
  resp_body_json()
  
  gettracksmeta[[i]] <- unlist(lapply(audio_analysis$sections, FUN = function(x) {x$tempo}))
} 


gettracksmeta

audio_analysis <- request("https://api.spotify.com/v1/audio-analysis/11dFghVXANMlKmJXsNCbNl") |>
  req_method("GET") |>
  req_headers(
    Authorization = paste("Bearer", spotify_access_token),
  ) |>
  req_error(is_error = ~ FALSE) |> 
  req_perform() |> 
  resp_body_json()
audio_analysis

```

